// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PartyFinder.Models;

namespace PartyFinder.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PartyFinder.Models.Art", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Ballet");

                    b.Property<string>("Comedy");

                    b.Property<string>("Craft");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Dance");

                    b.Property<string>("Design");

                    b.Property<int>("EventId");

                    b.Property<string>("Fineart");

                    b.Property<string>("Jewelry");

                    b.Property<string>("Literaryart");

                    b.Property<string>("Musical");

                    b.Property<string>("Opera");

                    b.Property<string>("Orchestra");

                    b.Property<string>("Other");

                    b.Property<string>("Painting");

                    b.Property<string>("Sculpture");

                    b.Property<string>("Theater");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Arts");
                });

            modelBuilder.Entity("PartyFinder.Models.AutoAndBoatAndAir", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Air");

                    b.Property<string>("Auto");

                    b.Property<string>("Boat");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("EventId");

                    b.Property<string>("Motorcycle_atv");

                    b.Property<string>("Other");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("AutoAndBoatAndAirs");
                });

            modelBuilder.Entity("PartyFinder.Models.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Career");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Design");

                    b.Property<string>("Educators");

                    b.Property<string>("Environmentandsustainability");

                    b.Property<int>("EventId");

                    b.Property<string>("Finance");

                    b.Property<string>("Investment");

                    b.Property<string>("Media");

                    b.Property<string>("Nonprofitandngos");

                    b.Property<string>("Other");

                    b.Property<string>("Realestate");

                    b.Property<string>("Salesandmarketing");

                    b.Property<string>("Startupandsmallbusiness");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("PartyFinder.Models.CharityAndCauses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Animalwelfare");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Dissasterrelief");

                    b.Property<string>("Education");

                    b.Property<string>("Environment");

                    b.Property<int>("EventId");

                    b.Property<string>("Healthcare");

                    b.Property<string>("Humanright");

                    b.Property<string>("Internationalaid");

                    b.Property<string>("Other");

                    b.Property<string>("Poverty");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("CharityAndCauseses");
                });

            modelBuilder.Entity("PartyFinder.Models.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City_town");

                    b.Property<string>("County");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("EventId");

                    b.Property<string>("Heritage");

                    b.Property<string>("Historic");

                    b.Property<string>("Language");

                    b.Property<string>("Lgbt");

                    b.Property<string>("Medieval");

                    b.Property<string>("Nationality");

                    b.Property<string>("Other");

                    b.Property<string>("Province");

                    b.Property<string>("Renaissance");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Communities");
                });

            modelBuilder.Entity("PartyFinder.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Genre")
                        .IsRequired();

                    b.Property<string>("Location")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Subcategory")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("PartyFinder.Models.FamilyAndEducation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alumni");

                    b.Property<string>("Baby");

                    b.Property<string>("Childrenandyouth");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Education");

                    b.Property<int>("EventId");

                    b.Property<string>("Other");

                    b.Property<string>("Parenting");

                    b.Property<string>("Parentsassociation");

                    b.Property<string>("Reunion");

                    b.Property<string>("Seniorcitizen");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("FamilyAndEducations");
                });

            modelBuilder.Entity("PartyFinder.Models.Fashion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Accessories");

                    b.Property<string>("Beauty");

                    b.Property<string>("Bridal");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("EventId");

                    b.Property<string>("Fashions");

                    b.Property<string>("Other");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Fashions");
                });

            modelBuilder.Entity("PartyFinder.Models.FilmAndMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adult");

                    b.Property<string>("Anime");

                    b.Property<string>("Comedy");

                    b.Property<string>("Comic");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("EventId");

                    b.Property<string>("Film");

                    b.Property<string>("Gaming");

                    b.Property<string>("Other");

                    b.Property<string>("Tv");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("FilmAndMedias");
                });

            modelBuilder.Entity("PartyFinder.Models.FoodAndDrink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Beer");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("EventId");

                    b.Property<string>("Food");

                    b.Property<string>("Other");

                    b.Property<string>("Spirits");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.Property<string>("Wine");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("FoodAndDrinks");
                });

            modelBuilder.Entity("PartyFinder.Models.Government", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("County_municipalgovernment");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Democraticparty");

                    b.Property<int>("EventId");

                    b.Property<string>("Federalgovernment");

                    b.Property<string>("Internationalaffair");

                    b.Property<string>("Military");

                    b.Property<string>("Nationalsecurity");

                    b.Property<string>("Nonpartisan");

                    b.Property<string>("Other");

                    b.Property<string>("Otherparty");

                    b.Property<string>("Republicanparty");

                    b.Property<string>("Stategovernment");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Governments");
                });

            modelBuilder.Entity("PartyFinder.Models.Health", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("EventId");

                    b.Property<string>("Medical");

                    b.Property<string>("Mentalhealth");

                    b.Property<string>("Other");

                    b.Property<string>("Personalhealth");

                    b.Property<string>("Spa");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.Property<string>("Yoga");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Healths");
                });

            modelBuilder.Entity("PartyFinder.Models.Hobby", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Adult");

                    b.Property<string>("Anime_Comic");

                    b.Property<string>("Books");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Diy");

                    b.Property<string>("Drawingandpainting");

                    b.Property<int>("EventId");

                    b.Property<string>("Gaming");

                    b.Property<string>("Knitting");

                    b.Property<string>("Other");

                    b.Property<string>("Photography");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Hobbies");
                });

            modelBuilder.Entity("PartyFinder.Models.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Channukah");

                    b.Property<string>("Christmas");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Easter");

                    b.Property<int>("EventId");

                    b.Property<string>("Fallevent");

                    b.Property<string>("Halloween_haunt");

                    b.Property<string>("Independenceday");

                    b.Property<string>("Newyearseve");

                    b.Property<string>("Other");

                    b.Property<string>("Stpatricksday");

                    b.Property<string>("Thanksgiving");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Holidaies");
                });

            modelBuilder.Entity("PartyFinder.Models.HomeAndLifestyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Dating");

                    b.Property<int>("EventId");

                    b.Property<string>("Homeandgarden");

                    b.Property<string>("Other");

                    b.Property<string>("Petsandanimal");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("HomeAndLifestyles");
                });

            modelBuilder.Entity("PartyFinder.Models.Music", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alternative");

                    b.Property<string>("Bluesandjazz");

                    b.Property<string>("Classical");

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Cultural");

                    b.Property<string>("Edm_electronic");

                    b.Property<int>("EventId");

                    b.Property<string>("Folk");

                    b.Property<string>("Hiphopp_rap");

                    b.Property<string>("Indie");

                    b.Property<string>("Latin");

                    b.Property<string>("Metal");

                    b.Property<string>("Opera");

                    b.Property<string>("Other");

                    b.Property<string>("Pop");

                    b.Property<string>("Randb");

                    b.Property<string>("Reggae");

                    b.Property<string>("Religious_spiritual");

                    b.Property<string>("Rock");

                    b.Property<string>("Top40");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Musics");
                });

            modelBuilder.Entity("PartyFinder.Models.RSVP", b =>
                {
                    b.Property<int>("RSVPId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("EventId");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("RSVPId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("RSVPs");
                });

            modelBuilder.Entity("PartyFinder.Models.SchoolActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Afterschoolcare");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Dinner");

                    b.Property<int>("EventId");

                    b.Property<string>("Fundraiser");

                    b.Property<string>("Other");

                    b.Property<string>("Pablicspeaker");

                    b.Property<string>("Parking");

                    b.Property<string>("Raffle");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("SchoolActivities");
                });

            modelBuilder.Entity("PartyFinder.Models.ScienceAndTech", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Biotech");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("EventId");

                    b.Property<string>("Hightech");

                    b.Property<string>("Medicine");

                    b.Property<string>("Mobile");

                    b.Property<string>("Other");

                    b.Property<string>("Robotic");

                    b.Property<string>("Science");

                    b.Property<string>("Socialmedia");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("ScienceAndTechs");
                });

            modelBuilder.Entity("PartyFinder.Models.Spirituality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Buddism");

                    b.Property<string>("Christianity");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Easternreligion");

                    b.Property<int>("EventId");

                    b.Property<string>("Islam");

                    b.Property<string>("Judaism");

                    b.Property<string>("Mormonism");

                    b.Property<string>("Mysticismandoccult");

                    b.Property<string>("Newage");

                    b.Property<string>("Other");

                    b.Property<string>("Sikhism");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Spiritualities");
                });

            modelBuilder.Entity("PartyFinder.Models.SportAndFitness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Baseball");

                    b.Property<string>("Basketball");

                    b.Property<string>("Camp");

                    b.Property<string>("Cheer");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Cycling");

                    b.Property<int>("EventId");

                    b.Property<string>("Exercise");

                    b.Property<string>("Fightingandmartialart");

                    b.Property<string>("FootYogaball");

                    b.Property<string>("Football");

                    b.Property<string>("Golf");

                    b.Property<string>("Hockey");

                    b.Property<string>("Lacrosse");

                    b.Property<string>("Motorsport");

                    b.Property<string>("Mountainbiking");

                    b.Property<string>("Obstacle");

                    b.Property<string>("Other");

                    b.Property<string>("Rugby");

                    b.Property<string>("Running");

                    b.Property<string>("Snowsport");

                    b.Property<string>("Soccer");

                    b.Property<string>("Softball");

                    b.Property<string>("Swimmingandwatersport");

                    b.Property<string>("Tennis");

                    b.Property<string>("Trackandfield");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.Property<string>("Volleyball");

                    b.Property<string>("Walking");

                    b.Property<string>("Weightlifting");

                    b.Property<string>("Wrestling");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("SportAndFitnesses");
                });

            modelBuilder.Entity("PartyFinder.Models.TravelAndOutdoor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Climbing");

                    b.Property<string>("Conoeing");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("EventId");

                    b.Property<string>("Hiking");

                    b.Property<string>("Kayaking");

                    b.Property<string>("Other");

                    b.Property<string>("Rafting");

                    b.Property<string>("Travel");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("TravelAndOutdoors");
                });

            modelBuilder.Entity("PartyFinder.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PartyFinder.Models.Art", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("Arts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("Arts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.AutoAndBoatAndAir", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("AutoAndBoatAndAirs")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("AutoAndBoatAndAirs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.Business", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("Businesses")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("Businesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.CharityAndCauses", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("CharityAndCauseses")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("CharityAndCauseses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.Community", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("Communities")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("Communities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.Event", b =>
                {
                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.FamilyAndEducation", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("FamilyAndEducations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("FamilyAndEducations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.Fashion", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("Fashions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("Fashions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.FilmAndMedia", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("FilmAndMedias")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("FilmAndMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.FoodAndDrink", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("FoodAndDrinks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("FoodAndDrinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.Government", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("Governments")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("Governments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.Health", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("Healths")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("Healths")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.Hobby", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("Hobbies")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("Hobbies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.Holiday", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("Holidaies")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("Holidaies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.HomeAndLifestyle", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("HomeAndLifestyles")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("HomeAndLifestyles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.Music", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("Musics")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("Musics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.RSVP", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("RSVPs")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "Users")
                        .WithMany("RSVPs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.SchoolActivity", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("SchoolActivities")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("SchoolActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.ScienceAndTech", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("ScienceAndTechs")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("ScienceAndTechs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.Spirituality", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("Spiritualities")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("Spiritualities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.SportAndFitness", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("SportAndFitnesses")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("SportAndFitnesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PartyFinder.Models.TravelAndOutdoor", b =>
                {
                    b.HasOne("PartyFinder.Models.Event", "Events")
                        .WithMany("TravelAndOutdoors")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PartyFinder.Models.User", "User")
                        .WithMany("TravelAndOutdoors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
